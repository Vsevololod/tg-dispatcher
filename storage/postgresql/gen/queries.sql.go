// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVideo = `-- name: CreateVideo :exec
INSERT INTO video (
    hash_id, original_id, url, video_id, load_timestamp, path, title, duration,
    timestamp, filesize, thumbnail, channel_url, channel_id, user_id, channel, loaded_times
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8,
             $9, $10, $11, $12, $13, $14, $15, $16
         )
`

type CreateVideoParams struct {
	HashID        string      `db:"hash_id" json:"hash_id"`
	OriginalID    int64       `db:"original_id" json:"original_id"`
	Url           string      `db:"url" json:"url"`
	VideoID       string      `db:"video_id" json:"video_id"`
	LoadTimestamp int64       `db:"load_timestamp" json:"load_timestamp"`
	Path          string      `db:"path" json:"path"`
	Title         string      `db:"title" json:"title"`
	Duration      int64       `db:"duration" json:"duration"`
	Timestamp     int64       `db:"timestamp" json:"timestamp"`
	Filesize      pgtype.Int8 `db:"filesize" json:"filesize"`
	Thumbnail     string      `db:"thumbnail" json:"thumbnail"`
	ChannelUrl    string      `db:"channel_url" json:"channel_url"`
	ChannelID     string      `db:"channel_id" json:"channel_id"`
	UserID        int64       `db:"user_id" json:"user_id"`
	Channel       pgtype.Text `db:"channel" json:"channel"`
	LoadedTimes   pgtype.Int8 `db:"loaded_times" json:"loaded_times"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) error {
	_, err := q.db.Exec(ctx, createVideo,
		arg.HashID,
		arg.OriginalID,
		arg.Url,
		arg.VideoID,
		arg.LoadTimestamp,
		arg.Path,
		arg.Title,
		arg.Duration,
		arg.Timestamp,
		arg.Filesize,
		arg.Thumbnail,
		arg.ChannelUrl,
		arg.ChannelID,
		arg.UserID,
		arg.Channel,
		arg.LoadedTimes,
	)
	return err
}

const createVideoMin = `-- name: CreateVideoMin :exec
INSERT INTO video(hash_id, original_id, url, video_id, load_timestamp, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateVideoMinParams struct {
	HashID        string `db:"hash_id" json:"hash_id"`
	OriginalID    int64  `db:"original_id" json:"original_id"`
	Url           string `db:"url" json:"url"`
	VideoID       string `db:"video_id" json:"video_id"`
	LoadTimestamp int64  `db:"load_timestamp" json:"load_timestamp"`
	UserID        int64  `db:"user_id" json:"user_id"`
}

func (q *Queries) CreateVideoMin(ctx context.Context, arg CreateVideoMinParams) error {
	_, err := q.db.Exec(ctx, createVideoMin,
		arg.HashID,
		arg.OriginalID,
		arg.Url,
		arg.VideoID,
		arg.LoadTimestamp,
		arg.UserID,
	)
	return err
}

const getVideoByID = `-- name: GetVideoByID :one
SELECT hash_id, original_id, url, video_id, load_timestamp, path, title, duration, timestamp, filesize, thumbnail, channel_url, channel_id, user_id, channel, loaded_times FROM video WHERE hash_id = $1
`

func (q *Queries) GetVideoByID(ctx context.Context, hashID string) (Video, error) {
	row := q.db.QueryRow(ctx, getVideoByID, hashID)
	var i Video
	err := row.Scan(
		&i.HashID,
		&i.OriginalID,
		&i.Url,
		&i.VideoID,
		&i.LoadTimestamp,
		&i.Path,
		&i.Title,
		&i.Duration,
		&i.Timestamp,
		&i.Filesize,
		&i.Thumbnail,
		&i.ChannelUrl,
		&i.ChannelID,
		&i.UserID,
		&i.Channel,
		&i.LoadedTimes,
	)
	return i, err
}

const updateVideo = `-- name: UpdateVideo :exec
UPDATE video SET
                 title = $1,
                 url = $2,
                 duration = $3,
                 path = $4,
                 filesize = $5,
                 channel = $6,
                 loaded_times = $7
WHERE hash_id = $8
`

type UpdateVideoParams struct {
	Title       string      `db:"title" json:"title"`
	Url         string      `db:"url" json:"url"`
	Duration    int64       `db:"duration" json:"duration"`
	Path        string      `db:"path" json:"path"`
	Filesize    pgtype.Int8 `db:"filesize" json:"filesize"`
	Channel     pgtype.Text `db:"channel" json:"channel"`
	LoadedTimes pgtype.Int8 `db:"loaded_times" json:"loaded_times"`
	HashID      string      `db:"hash_id" json:"hash_id"`
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) error {
	_, err := q.db.Exec(ctx, updateVideo,
		arg.Title,
		arg.Url,
		arg.Duration,
		arg.Path,
		arg.Filesize,
		arg.Channel,
		arg.LoadedTimes,
		arg.HashID,
	)
	return err
}
